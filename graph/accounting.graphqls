extend type Query {
    accountClasses: [AccountClass!]! @authenticated
    accountClass(input: AccountClassInput!): AccountClass! @authenticated

    accountClassTypes: AccountClassTypesResult! @authenticated
    accountClassType(input: AccountClassTypeInput!): AccountClassType! @authenticated

    accountGroups(input: AccountGroupInput): [AccountGroup!]! @authenticated
    accountGroup(input: AccountGroupInput!): AccountGroup! @authenticated
}

extend type Mutation {
    storeAccountClass(input: WriteAccountClassInput!): AccountClass! @authenticated
    updateAccountClassByID(id: Int!, input: WriteAccountClassInput!): AccountClass! @authenticated
    deleteAccountClassByID(id: Int!): Int! @authenticated

    storeAccountGroup(input: WriteAccountGroupInput!): AccountGroup! @authenticated
    updateAccountGroupByID(id: Int!, input: WriteAccountGroupInput!): AccountGroup! @authenticated
    deleteAccountGroupByID(id: Int!): Int! @authenticated
}

input AccountGroupInput {
    id: Int
    parentIDIsNULL: Boolean
}

input WriteAccountGroupInput {
    name: String!
    classID: Int!
    parentID: Int
    inactive: Boolean
}

input AccountClassInput {
    id: Int!
}

input WriteAccountClassInput {
    name: String!
    typeID: Int!
    inactive: Boolean
}

input AccountClassTypeInput {
    id: ID!
}

type AccountClassType {
    id: ID!
    name: String!
}

type AccountClass {
    id: ID!
    name: String!
    typeID: Int!
    inactive: Boolean
    type: AccountClassType
}

type AccountClassTypesResult {
    data: [AccountClassType!]!
}

type AccountGroup {
    id: ID!
    name: String!
    classID: Int!
    parentID: Int!
    parent: AccountGroup
    class: AccountClass
    inactive: Boolean!
    child: [AccountGroup!]!
}
