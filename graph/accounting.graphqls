extend type Query {
    accountClasses: [AccountClass!]! @authenticated
    accountClass(input: AccountClassInput!): AccountClass! @authenticated

    accountClassTypes: AccountClassTypesResult! @authenticated
    accountClassType(input: AccountClassTypeInput!): AccountClassType! @authenticated

    accountGroups(input: AccountGroupInput): [AccountGroup!]! @authenticated
    accountGroup(input: AccountGroupInput!): AccountGroup! @authenticated

    accounts(input: AccountInput): [Account!]! @authenticated
    account(input: AccountInput!): Account! @authenticated

    generalLedgerPreferences(input: GeneralLedgerPreferenceInput): [GeneralLedgerPreference!]! @authenticated

    fiscalYears(input: FiscalYearsInput): FiscalYearsResult! @authenticated

    bankAccountTypes: BankAccountTypesResult! @authenticated
    bankAccounts(input: BankAccountsInput!): BankAccountsResult! @authenticated
    bankAccount(input: BankAccountInput!): BankAccount! @authenticated
}

extend type Mutation {
    storeAccountClass(input: WriteAccountClassInput!): AccountClass! @authenticated
    updateAccountClassByID(id: Int!, input: WriteAccountClassInput!): AccountClass! @authenticated
    deleteAccountClassByID(id: Int!): Int! @authenticated

    storeAccountGroup(input: WriteAccountGroupInput!): AccountGroup! @authenticated
    updateAccountGroupByID(id: Int!, input: WriteAccountGroupInput!): AccountGroup! @authenticated
    deleteAccountGroupByID(id: Int!): Int! @authenticated

    storeAccount(input: WriteAccountInput!): Account! @authenticated
    updateAccountByID(id: Int!, input: WriteAccountInput!): Account! @authenticated
    deleteAccountByID(id: Int!): Int! @authenticated

    storeTransaction(input: WriteTransactionInput!): Journal! @authenticated

    updateGeneralLedgerPreferences(input: [WriteGeneralLedgerPreferenceInput!]!): [GeneralLedgerPreference!]! @authenticated

    storeBankAccount(input: WriteBankAccountInput!): BankAccount! @authenticated
    updateBankAccountByID(id: Int!, input: WriteBankAccountInput!): BankAccount! @authenticated

    storeFiscalYear(input: WriteFiscalYearInput!): FiscalYear! @authenticated
    closeFiscalYear(id: Int!): Int! @authenticated
}

input FiscalYearsInput {
    paging: PagingInput
}

input WriteFiscalYearInput {
    startDate: Time!,
    endDate: Time!,
    closed: Boolean
}

input GeneralLedgerPreferenceInput {
    id: ID
}

input BankAccountsInputScope {
    id: ID
}

input BankAccountsInput {
    scope: BankAccountsInputScope
    paging: PagingInput
}

input BankAccountInput {
    id: ID
}

input WriteGeneralLedgerPreferenceInput {
    id: ID!
    accountID: ID!
}

input WriteTransactionRow {
    accountID: Int!
    amount: Float!
}

input WriteTransactionInput {
    transDate: Time
    memo: String
    data: [WriteTransactionRow!]!
}

input AccountInput {
    id: Int
}

input WriteAccountInput {
    name: String!
    groupID: Int!
    inactive: Boolean
}

input AccountGroupInput {
    id: Int
    parentIDIsNULL: Boolean
}

input WriteAccountGroupInput {
    name: String!
    classID: Int!
    parentID: Int
    inactive: Boolean
}

input AccountClassInput {
    id: Int!
}

input WriteAccountClassInput {
    name: String!
    typeID: Int!
    inactive: Boolean
}

input WriteBankAccountInput {
    accountID: Int!
    type: Int!
    bankNumber: String!
    inactive: Boolean
}

input AccountClassTypeInput {
    id: ID!
}

type AccountClassType {
    id: ID!
    name: String!
}

type AccountClass {
    id: ID!
    name: String!
    typeID: Int!
    inactive: Boolean
    type: AccountClassType!
}

type AccountClassTypesResult {
    data: [AccountClassType!]!
}

type AccountGroup {
    id: ID!
    name: String!
    classID: Int!
    parentID: Int!
    parent: AccountGroup
    class: AccountClass
    inactive: Boolean!
    child: [AccountGroup!]!
}

type Account {
    id: ID!
    name: String!
    groupID: Int!
    inactive: Boolean!
    group: AccountGroup!
}

type Journal {
    id: ID!
    amount: Float!
    transDate: Time!
    createdAt: Time!
}

type GeneralLedgerPreference {
    id: ID!
    accountID: ID!
    account: Account!
}

type FiscalYear {
    id: ID!
    startDate: Time!
    endDate: Time!
    closed: Boolean!
}

type FiscalYearsResult {
    data: [FiscalYear!]!
    paging: Paging!
}

type BankAccount {
    id: ID!
    accountID: ID!
    type: Int!
    BankNumber: String
    Inactive: Boolean!
    account: Account!
}

type BankAccountType {
    id: ID!
    name: String!
}

type BankAccountTypesResult {
    data: [BankAccountType!]!
}

type BankAccountsResult {
    data: [BankAccount!]!
    paging: Paging!
}